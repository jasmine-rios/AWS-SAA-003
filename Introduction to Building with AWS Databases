# Module 1: AWS Well-Architected Framework 

Follow notes from other file in this repo about the framework

# Module 2: Data Types

- Structured Data
- Unstructed Data
- Semi-structured Data

## Structured Data

## Unstructured Data

## Semi-Structured Data

# AWS Database Services

## 

# Module 4: Relational Databases:

## Relational Databases Introduction

## Amazon Relational Database Service (Amazon RDS)

## Amazon Aurora

# Module 5: Nonrelational Databases

## Nonrelational Databases Introduction

## Amazon DynamoDB

## Amazon Keyspaces (for Apache Cassandra)

## Amazon Timestream

Amazon Timestream is a fast, scalable serverless time-series database for Internet of Things (IoT) and operational applications

Makes it easy to store and analyze trillions of events a day

Kepps recent data in memory and moves historical data to cost-optimized storage tier based upon user-defined policies

Has a purpose-built query engine that allows to analyze this data without needing to specify if the data is in memory or a cost-optimized tier

Has a built-in-time-series analytics funtion to help identify trends and patterns in near real-time

It is serverless and automatically scales up and down to adjust for capacity and performance

### High Performance at Low Cost

Timestream is designed to facilitate interactive and affortable real-time analytics

Has product features such as scheduled queries, mult-measure records, and data storage tiering

You can proccess, store, and analyze your time-series data at a fraction of the cost of existing time-series solutions

Helps you derieve faster and more-affortable insights from your data so you can continue to make more data-driven business decisions

### Serverless with Auto Scaling

This is serverless which means no servers to manage and no capacity to provision

Gives you the scale to process trillions of event and millions of queries a day

Automatically scales to adjust for capacity

### Data lifecycle management

Simplifies the complex process of data management

Offers storage tiering with a memory store for recent data and magnetic store for historical data

Automates transfer of data from memory store to magnetic store based on user-configurable policies

### Simplifed data access

You no longer have to use disparate tools to access recent and historical data

Has a purpose-build query engine that transparently accessses and combines data across storage tiers without you having to specify the data location

### Purpose-built for Time Series

You can analyze time-series data using SQL using built-in time series functions for smoothing, approximation, and interpolation

Also supports advanced aggregates, windows functions, and complex data types such as arrays and rows

### Always Encrypted

Ensures data is always encrypted at rest or in transit

You can also specifiy AWS Key Management (AWS KMS) customer managed key for encrypting data in the magnetic store

### Use Case: IoT sensor data capture architecture

1. You use *Amazon SQS* to have sensor data sit in quenue to be processed by *AWS Lambda*

2. This event triggers the *AWS Lamabda* to initiate a function that loads the message into the Timestream table for data storage

3. *Amazon Timestream* serves as a first-stage repository for all messages sent to the *Amazon SQS* quenue

4. *Amazon EMR* gathers this data from Timestream and processes it then stores it in a *S3 data lake*

5. Once stored in the data lake, *Amazon Athena* can query the data

## Amazon Quantum Ledger Database (Amazon QLDB)

### What is Amazon QLDB?

It is a fully managed ledger database that provides a transparent, immutable, and cryptographically verifiable transaction log 

This log is owned by a centeral trusted authority

QLDB tracks each and every application data change and maintains a complete and verifiable history of changes over time.

### Use Case: Delivering Cryptographically Secure and Verifiable Medical Data

Medical companies use QLDB to maintain their records.

It is not as optimized as others for one-time search, analytics, and reporting, although these are possible

This is how the architecture is configured:

1. *ElastiCache for Memcached* caches user session data to provide near real-time response times
2. *AWS Elastic Benstalk* deploys and runs the frontend and application logic
    It offloads the operational work of deployent, patching, and scaling
3. *Amazon QLDB* maintains and stores unfalsable an crypto verifiable records of medical histories
    Successful transactions are streamed to Amazon RDS database fir searching and analytics
4. Data is sent from QLDB and then exported by *Kinesis Data Streams* to Amazon RDS to be queried 
5. Since Amazon QLDB is not optimized for ad-hoc search, reporting, and analytics, the successful transactions are placed into *Amazon RDS* instead
   Amazon QLDB remains the database used for a system of record.

## Amazon ElastiCache

### What is Amazon ElastiCache?

It offers managed Redis and memcached distributed memory caches

Seamlessly deploy, run, and scale popular open source-compatible, in-memory data stores

Build data-intensive apps or improve the performance of your existing apps by retrieving data from high throughput and low latency in-memory data stores

### Use Case: Word Press Database Cache Architecture

When database access is causing performance problems for an application, an in-memory cache can improve latency, increase throughput, and ease the load on the database

For this use case, this architecture is one way you can serve cache items in less than a millisecound and scale cost effectively

1. Mobile client connects to WordPress website through *Amazon EC2*
2. The database is Auroa and uses *ElastiCache* to store data for the website
   It holds a copy of data retrieved from the database for the specified period of time
   The only time the database is accessed is when noncached data is required
3.
4.
### Use Case: Scalable Distrubuted Cache Architecture

## Amazon MemoryDB for Redis
